<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="utf-8">
<base href="{{ base_url }}">
<meta name="viewport" content="width=device-width, initial-scale=1">
<link rel="shortcut icon" href="data:," />
<title>{% if photo_num %}#{{ photo_num }} - {% endif %}{{ album.name }}</title>

{% if photo_num %}
{% set e = photo.exif %}
<meta property="og:title" content="#{{ photo_num }} - {{ album.name }}">
<meta property="og:description" content="{{e.FocalLengthIn35mmFormat}} {{e.ExposureTime}} f/{{e.Aperture}} ISO{{e.ISO}}">
<meta property="og:type" content="article">
{# OpenGraph metadata requires absolute URLs for og:image.
Sadly, this means that to get previews working in chat applications and social
media, it is necessary to hardcode the URL where the gallery will be deployed. #}
{% if abs_base_url %}
<meta property="og:image" content="{{ abs_base_url }}{{ photo.loupe_thumbs.jpeg.0.url }}">
<meta property="twitter:image" content="{{ abs_base_url }}{{ photo.loupe_thumbs.jpeg.0.url }}">
{% endif %}
<meta property="og:image:width" content="{{ photo.loupe_thumbs.jpeg.0.w }}">
<meta property="og:image:height" content="{{ photo.loupe_thumbs.jpeg.0.h }}">
<meta property="og:image:type" content="image/jpeg">
<!-- Necessary to make chat applications show photo previews. -->
<meta property="twitter:card" content="summary_large_image">
{% endif %}

<style>
*, *:before, *:after {
    box-sizing: border-box;
}
.contact {
    background-image: image-set(
        {% for sheet in album.contact_sheets %}
        {% for format, url in sheet.url_by_format|items %}
        "{{ url | urlencode}}" {{ sheet.dpr }}x type("image/{{ format }}")
        {%- if not loop.last %}, {% endif +%}
        {% endfor %}
        {% endfor %}
    );
    margin: 4px;
}
#contact-sheet {
    display: flex;
    flex-flow: row wrap;
    margin: -4px;
}
.contact {
    display: block;
    background-size: {{album.contact_sheet_width_logical}}px {{album.contact_sheet_height_logical}}px;
    height: {{ album.contact_height_logical }}px;
}
.loupe {
    display: none;
    position: fixed;
    top: 0; left: 0; bottom: 0; right: 0;
    background: black;
}
.loupe.active_page {
    display: block; /* Make visible */
}
body:has(.loupe.active_page) {
    overflow: hidden; /* Disable scroll bars while in the loupe */
}
body:has(.loupe.active_page) #contact-sheet {
    /* Prevent tab key from reaching the contact sheet while in the loupe. */
    visibility: hidden;
}
.loupe-picture {
    display: flex;
    justify-content: center;
    align-items: center;
    height: 100%;
}
.loupe-picture > img {
    max-width: 100%;
    max-height: 100%;
    display: block;
}
.nav-pad-left, .nav-pad-right, .nav-pad-up {
    display: block;
    position: fixed;
    color: white;
    text-shadow: 0 0 5px black;
    font-size: 52px;
    text-decoration: none;
    opacity: 0;
}
.nav-pad-left:hover, .nav-pad-right:hover, .nav-pad-up:hover,
.nav-pad-left:focus, .nav-pad-right:focus, .nav-pad-up:focus {
    opacity: 1;
}
.nav-pad-left, .nav-pad-right {
    top: 0; bottom: 0;
    width: 30vw;
    line-height: 100vh;
}
.nav-pad-up {
    top: 0px;
    width: 40vw;
    height: 30vh;
    padding-top: 20px;
    align-content: top;
    left: 0; right: 0; margin: 0 auto; /* center pad horizontally */
    text-align: center;
}
.nav-pad-left {
    text-align: left;
    left: 0;
    padding-left: 10px;
}
.nav-pad-right {
    text-align: right;
    right: 0;
    padding-right: 10px;
}
.photo-exif {
    position: fixed;
    top: 20px;
    left: 20px;
    background: rgba(127, 127, 127, 0.5);
    color: white;
    text-shadow: 0 0 5px black;
    padding: 10px;
    font-family: sans-serif;
    border-radius: 2px;
    font-size: 16px;
}
.photo-exif p {
    margin: 0;
}
.photo-buttons {
    position: fixed;
    top: 0;
    right: 0;
}
.photo-buttons > .button {
    display: inline-block;
    vertical-align: middle;
    text-align: center;
    font-size: 34px;
    width: 60px;
    height: 60px;
    line-height: 60px;
    background: none;
    border: 0;
    color: white;
    text-shadow: 0 0 5px black;
    cursor: pointer;
}
</style>
</head>
<body>
<header>
    <h1>{{ album.name }}</h1>
</header>
<div id="contact-sheet">
    {%- for photo in album.photos %}
    <a class="contact" href="photo-{{loop.index}}/" onclick="navigate(this, event)"
     style="width: {{photo.contact_region.2}}px;
      background-position: -{{photo.contact_region.0}}px -{{photo.contact_region.1}}px;
     "></a>
    {%- endfor %}
</div>
{% for photo in album.photos %}
<div id="photo-{{ loop.index }}" class="loupe
 {%- if loop.index == photo_num %} active_page{% endif %}">
    <picture class="loupe-picture">
        {% for format, thumbs in photo.loupe_thumbs|items %}
        <source type="image/{{format}}"
{# Using the sizes attribute we could tell the browser to preload an
image large enough to cover the screen even if resized...
... if only CSS had a way to represent the size of the screen within
an expression.

At least there is 100vh and 100vw (viewport size) which makes for a
good no-script fallback.

JS code will replace these 100vh and 100vw with the actual screen
size and update it on zoom or screen resolution change. #}
         data-sizes="max(
            min($ScreenWidth$, $ScreenHeight$ * {{photo.orig_width}} / {{photo.orig_height}}),
            min($ScreenHeight$, $ScreenWidth$ * {{photo.orig_width}} / {{photo.orig_height}})
         )"
         sizes="max(
            min(100vw, 100vh * {{photo.orig_width}} / {{photo.orig_height}}),
            min(100vh, 100vw * {{photo.orig_width}} / {{photo.orig_height}})
         )"
         srcset="{% for thumb in thumbs|reverse -%}
{# CSS screen size * DPR may be a fraction of a pixel greater than the actual
screen resolution, due to limited precision in the browser engines and rounding.
Since the thumbnails are sized for common screen sizes, it makes sense to add 1
here so the browser doesn't switch thumb_2560 to thumb_4096 because of screen
width being calculated as 2560.36 device pixels. #}
                 {{ thumb.url|urlencode }} {{ thumb.w + 1 }}w
                 {%- if not loop.last %}, {% endif -%}
                 {%- endfor %}">
        {% endfor %}
        <img fetchpriority="low" loading="lazy" style="aspect-ratio: {{photo.orig_width}}/{{photo.orig_height}};">
    </picture>
    <div class="nav-pads">
        {% if not loop.first %}
        <a class="nav-pad-left" href="photo-{{ loop.index - 1 }}/"
         onclick="navigate(this, event)" title="Previous image in gallery">ðŸ¡°</a>
        {% endif %}
        {% if not loop.last %}
        <a class="nav-pad-right" href="photo-{{ loop.index + 1}}/"
         onclick="navigate(this, event)" title="Next image in gallery">ðŸ¡²</a>
        {% endif %}
        <a class="nav-pad-up" href=""
         onclick="navigate(this, event)" title="Go back to gallery">ðŸ¡±</a>
    </div>
    <div class="photo-exif">
        {% set e = photo.exif %}
        <p>{{e.FocalLengthIn35mmFormat}}<sup><abbr title="35mm equivalent focal length">eq</abbr></sup>
        {{e.ExposureTime}} f/{{e.Aperture}} ISO{{e.ISO}}</p>
    </div>
    <div class="photo-buttons">
        <a class="button" title="Download photo" download href="{{ photo.orig_url }}">â¬‡</a>
        <button class="button" title="Toggle full-screen" onclick="photoToggleFullScreen(this)">â—±</button>
    </div>
</div>
{% endfor %}
<script>
window.addEventListener("keydown", function keyDown(ev) {
    // Full-screen
    if (ev.key == "f" || (ev.altKey && ev.key == "Enter")) {
        photoToggleFullScreen(this);
        return;
    }
    // Navigation
    const padName = {
        "ArrowLeft": "left",
        "PageUp": "left",
        "ArrowRight": "right",
        "PageDown": "right",
        "Escape": "up",
        "Backspace": "up",
        "ArrowUp": "up",
    }[ev.key];
    if (!padName)
        return;
    const pad = document.querySelector(`.loupe.active_page .nav-pad-${padName}`);
    if (!pad)
        return; // not in loupe
    ev.preventDefault();
    pad.click();
});

let prevScreenSize = [0, 0];
function updatePictureSizes() {
    const screenWidth = screen.width;
    const screenHeight = screen.height;

    console.log("Updating each picture 'sizes' attribute to match the current screen.");
    for (const source of document.querySelectorAll("picture.loupe-picture > source")) {
        source.sizes = source.getAttribute("data-sizes")
            .replaceAll("$ScreenWidth$", `${screenWidth}px`)
            .replaceAll("$ScreenHeight$", `${screenHeight}px`);
    }
    prevScreenSize = [screenWidth, screenHeight];
}
window.addEventListener("resize", function onResize() {
    if (screen.width != prevScreenSize[0] || screen.height != prevScreenSize[1])
        updatePictureSizes();
})
updatePictureSizes();

// JS-based tight mode, because HTTP2-3 servers cannot be trusted to respect
// priorities, and browsers cannot be trusted to request the correct priorities:
window.addEventListener("load", function onLoad() {
    // As of Jul 15 2025 this assumption seems to work on Firefox 140,
    // WebKit 60.5 and Chromium 138.
    // If a browser breaks this assumption AND {the browser doesn't request the
    // correct priorities OR the server prioritizes wrong}, the page will still
    // load, but the contact sheet thumbnails will load significantly slower.
    console.log("Page loaded, asuming contacts are loaded. Loading loupe thumbnails.")
    for (const img of document.querySelectorAll("img")) {
        img.loading = "eager";
    }
});

async function imageLoadAndDecodePromise(img) {
    // .decode() fails in Firefox if the img.loading == "lazy", even if it
    // the image has already been downloaded.
    img.loading = "eager";
    if (!img.complete) {
        await new Promise((resolve) => {
            img.addEventListener("load", () => resolve(), {once: true});
        });
    }
    await img.decode();
}
function imgWithNumber(n) {
    return document.querySelector(`#photo-${n} picture.loupe-picture > img`);
}
async function preloadPhoto(n) {
    const img = imgWithNumber(n);
    if (!img)
        return;
    console.log(`Loading photo ${n}`);
    await imageLoadAndDecodePromise(img);
    console.log(`Decoded photo ${n}`);
}

function navigate(el, event) {
    if (!location.protocol.startsWith("http")) {
        // file:/// URLs have pushState is disabled, so we return without
        // preventing the propagation of the event to degrade gracefully.
        // Also, browsers don't render index.html when loading a directory URL,
        // so we add it here:
        el.href += "index.html";
        return;
    }
    const url = el.getAttribute("href");
    event.preventDefault();
    // Using "" as relative URL in Firefox doesn't work, so we use "." instead,
    // which has the same effect.
    history.pushState({url: url}, "", url == "" ? "." : url);
    makePageActive(url);
}

// Called on hashchange and initial load.
// Schedules adjacent images to decode once the loupe for the current photo has loaded.
const albumName = {{ album.name | tojson }};
function makePageActive(pageUrl) {
    const match = new RegExp("^photo-(\\d+)/(?:index\.html)?$").exec(pageUrl);
    for (const el of document.querySelectorAll(".active_page")) {
        el.classList.remove("active_page");
    }
    if (!match) { // Contact sheet
        document.title = albumName;
        return;
    }

    // Loupe
    const n = parseInt(match[1]);
    document.title = `#${n} - ${albumName}`;
    document.getElementById(`photo-${n}`).classList.add("active_page");
    imageLoadAndDecodePromise(imgWithNumber(n))
        .then(() => {
            console.log(`Image ${n} is loaded, preparing neighbors...`)
        })
        .then(() => Promise.all([
            preloadPhoto(n + 1),
            preloadPhoto(n - 1),
        ]));
}
window.addEventListener("popstate", (ev) => {
    makePageActive(ev.state.url);
});
makePageActive(location.href.slice(document.baseURI.length));

function photoToggleFullScreen(a) {
    if (document.fullscreenElement) {
        document.exitFullscreen();
        return;
    }
    document.documentElement.requestFullscreen();
}
</script>
</body>
</html>